name: DAST PR Security Scan

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  dast-pr-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build and start application
      run: |
        # Build the Docker image
        docker build -t dast-demo-app-pr .
        
        # Start the application in background
        docker run -d -p 3008:3008 --name dast-app-pr dast-demo-app-pr
        
        # Wait for application to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3008/; do sleep 2; done'

    - name: Create ZAP output directory
      run: |
        mkdir -p zap_output
        chmod 777 zap_output

    - name: Run OWASP ZAP Baseline Scan (Fast)
      run: |
        # Use our custom script for better permission handling
        if [ -f "scripts/run-zap-scan.sh" ]; then
          # Modify the script to use host.docker.internal for containerized scanning
          sed 's|http://localhost:3008|http://host.docker.internal:3008|g' scripts/run-zap-scan.sh > scripts/run-zap-scan-docker.sh
          chmod +x scripts/run-zap-scan-docker.sh
          ./scripts/run-zap-scan-docker.sh
        else
          # Fallback to direct Docker command with correct hostname
          mkdir -p zap_output
          chmod 777 zap_output
          
          docker run --rm \
            -v ${{ github.workspace }}/zap_output:/zap/wrk \
            --add-host=host.docker.internal:host-gateway \
            ghcr.io/zaproxy/zaproxy:stable \
            bash -c "
              zap-baseline.py -t http://host.docker.internal:3008 -J /zap/wrk/zap_report.json -I || true
              chmod 666 /zap/wrk/* 2>/dev/null || true
            "
        fi

    - name: Upload ZAP Report to Codacy
      if: always()
      run: |
        echo "Checking for ZAP report files..."
        ls -la zap_output/ || echo "No zap_output directory found"
        
        if [ -f "zap_output/zap_report.json" ]; then
          echo "Found ZAP JSON report, validating format..."
          
          # Validate the report format
          if python3 scripts/validate-zap-report.py zap_output/zap_report.json; then
            echo "Report validation passed, uploading to Codacy..."
            
            curl -X POST https://app.codacy.com/api/v3/organizations/gh/codacy-acme/security/tools/dast/ZAP/reports \
              -H "api-token: ${{ secrets.CODACY_API_TOKEN }}" \
              -H "Content-Type: multipart/form-data" \
              -H "Accept: application/json" \
              -F "file=@./zap_output/zap_report.json" \
              -F "reportFormat=json" \
              -w "HTTP Status: %{http_code}\n" || echo "Failed to upload to Codacy"
          else
            echo "Report validation failed, skipping Codacy upload"
          fi
        else
          echo "ZAP JSON report not found, checking what files exist..."
          find zap_output -type f -name "*" 2>/dev/null || echo "No files found in zap_output"
        fi

    - name: Comment PR with scan results
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './zap_output/zap_report.json';
          
          let comment = '## üîí DAST Security Scan Results\n\n';
          
          if (fs.existsSync(path)) {
            try {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const site = report.site[0];
              const alerts = site.alerts || [];
              
              const highAlerts = alerts.filter(alert => alert.riskdesc.includes('High'));
              const mediumAlerts = alerts.filter(alert => alert.riskdesc.includes('Medium'));
              const lowAlerts = alerts.filter(alert => alert.riskdesc.includes('Low'));
              
              comment += `### Summary\n`;
              comment += `- üî¥ High Risk: ${highAlerts.length}\n`;
              comment += `- üü° Medium Risk: ${mediumAlerts.length}\n`;
              comment += `- üîµ Low Risk: ${lowAlerts.length}\n\n`;
              
              if (highAlerts.length > 0) {
                comment += `### üî¥ High Risk Issues\n`;
                highAlerts.forEach(alert => {
                  comment += `- **${alert.name}**: ${alert.desc}\n`;
                });
                comment += '\n';
              }
              
              comment += `The complete DAST report has been uploaded to Codacy.\n`;
            } catch (error) {
              comment += `‚ùå Error parsing scan results: ${error.message}\n`;
            }
          } else {
            comment += '‚ùå DAST scan failed - no results available\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Upload ZAP Reports as Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-pr-reports-${{ github.event.pull_request.number }}
        path: zap_output/
        retention-days: 7

    - name: Stop and remove containers
      if: always()
      run: |
        docker stop dast-app-pr || true
        docker rm dast-app-pr || true
